---
description: 
globs: 
alwaysApply: false
---
# MybatisXX 项目规范文档

## 一、项目结构规范

### 1.1 目录结构
```
mybatisXX/
├── .vscode/                      # VSCode 配置
│   ├── launch.json              # 调试配置
│   └── tasks.json              # 任务配置
├── src/                         # 源代码目录
│   ├── extension.ts            # 插件入口
│   ├── language/              # 语言支持
│   │   ├── java/             # Java 语言服务
│   │   │   ├── JavaParser.ts
│   │   │   └── JavaFormatter.ts
│   │   └── xml/              # XML 语言服务
│   │       ├── XmlParser.ts
│   │       └── XmlFormatter.ts
│   ├── completion/           # 代码补全
│   │   ├── sql/             # SQL 补全
│   │   │   ├── SqlCompletionProvider.ts
│   │   │   └── SqlSnippets.ts
│   │   └── java/            # Java 补全
│   │       ├── MapperCompletionProvider.ts
│   │       └── EntityCompletionProvider.ts
│   ├── navigation/          # 代码导航
│   │   ├── MapperNavigator.ts
│   │   └── ReferenceProvider.ts
│   ├── generation/          # 代码生成
│   │   ├── templates/       # 代码模板
│   │   │   ├── entity.ejs
│   │   │   ├── mapper.ejs
│   │   │   └── xml.ejs
│   │   └── generators/      # 生成器实现
│   │       ├── EntityGenerator.ts
│   │       ├── MapperGenerator.ts
│   │       └── XmlGenerator.ts
│   ├── database/           # 数据库支持
│   │   ├── connection/     # 数据库连接
│   │   │   ├── ConnectionManager.ts
│   │   │   └── ConnectionConfig.ts
│   │   └── operations/     # 数据库操作
│   │       ├── QueryExecutor.ts
│   │       └── ResultSetHandler.ts
│   └── utils/              # 工具类
│       ├── FileUtils.ts
│       └── TypeUtils.ts
├── resources/              # 资源文件
│   ├── icons/             # 图标资源
│   └── templates/         # 模板文件
├── syntaxes/              # 语法定义
│   ├── sql.tmLanguage.json
│   └── mybatis.tmLanguage.json
├── package.json           # 项目配置
├── tsconfig.json         # TypeScript 配置
└── README.md            # 项目说明
```

### 1.2 核心文件职责

#### 1.2.1 配置文件
- `package.json`: 扩展配置、依赖管理、命令定义
- `tsconfig.json`: TypeScript 编译配置
- `launch.json`: 调试配置
- `tasks.json`: 构建任务配置

#### 1.2.2 源码文件
- `extension.ts`: 扩展激活、命令注册、服务初始化
- `JavaParser.ts`: Java 文件解析、AST 生成
- `XmlParser.ts`: XML 文件解析、节点分析
- `MapperNavigator.ts`: 接口与 XML 导航实现
- `SqlCompletionProvider.ts`: SQL 补全实现

## 二、开发流程规范

### 2.1 环境配置

#### 2.1.1 开发环境要求
- Node.js >= 14.x
- VSCode >= 1.60.0
- TypeScript >= 4.x
- Git

#### 2.1.2 推荐的 VSCode 插件
- ESLint
- Prettier
- TypeScript and JavaScript Language Features
- Debug Extension

### 2.2 开发流程

#### 2.2.1 功能开发流程
1. 需求分析
   - 功能描述
   - 技术可行性
   - 实现方案

2. 设计阶段
   - 接口设计
   - 类图设计
   - 数据流设计

3. 编码阶段
   - 功能实现
   - 单元测试
   - 代码审查

4. 测试阶段
   - 功能测试
   - 集成测试
   - 性能测试

5. 发布阶段
   - 文档更新
   - 版本发布
   - 用户反馈

#### 2.2.2 版本控制规范
- 主分支：main
- 开发分支：develop
- 功能分支：feature/*
- 发布分支：release/*
- 修复分支：hotfix/*

### 2.3 测试规范

#### 2.3.1 单元测试
- 测试框架：Jest
- 覆盖率要求：>= 80%
- 测试文件命名：*.test.ts
- 测试用例组织：describe + it 结构

#### 2.3.2 集成测试
- 端到端测试
- 跨平台测试
- 性能测试

## 三、功能模块规范

### 3.1 核心功能

#### 3.1.1 Mapper 接口与 XML 关联
- 文件关联规则
- 跳转实现方式
- 重构支持范围

#### 3.1.2 代码生成
- 模板定义规范
- 生成规则配置
- 自定义扩展点

#### 3.1.3 智能提示
- 补全触发条件
- 提示内容范围
- 性能优化策略

#### 3.1.4 数据库集成
- 连接配置规范
- 操作接口定义
- 安全性要求

### 3.2 扩展功能

#### 3.2.1 配置项
- 用户设置项
- 工作区设置
- 默认配置

#### 3.2.2 命令定义
- 命令分类
- 快捷键绑定
- 上下文菜单

## 四、代码规范

### 4.1 TypeScript 规范

#### 4.1.1 基本规则
- 使用 strict 模式
- 明确的类型声明
- 避免 any 类型

#### 4.1.2 命名规范
- 类名：PascalCase
- 接口名：IPascalCase
- 方法名：camelCase
- 常量：UPPER_SNAKE_CASE

#### 4.1.3 注释规范
- 类注释：完整的 JSDoc
- 方法注释：参数和返回值说明
- 复杂逻辑注释：实现思路说明

### 4.2 文件组织

#### 4.2.1 导入顺序
1. Node 内置模块
2. VSCode API
3. 第三方依赖
4. 项目内模块

#### 4.2.2 导出规范
- 优先使用命名导出
- 避免默认导出
- 导出接口优先

## 五、性能规范

### 5.1 响应时间要求
- 补全响应：< 200ms
- 跳转响应：< 100ms
- 验证响应：< 500ms

### 5.2 资源使用限制
- 内存占用：< 200MB
- CPU 使用率：平均 < 5%
- 启动时间：< 2s

## 六、发布规范

### 6.1 版本号规则
- 主版本号：不兼容的 API 修改
- 次版本号：向下兼容的功能性新增
- 修订号：向下兼容的问题修正

### 6.2 发布流程
1. 版本号更新
2. 更新日志编写
3. 测试验证
4. 打包发布
5. 标签创建

## 七、文档规范

### 7.1 文档类型
- README.md：项目说明
- API.md：接口文档
- CONTRIBUTING.md：贡献指南
- CHANGELOG.md：更新日志

### 7.2 文档格式
- 使用 Markdown
- 层级最多 4 级
- 包含示例代码
- 包含接口说明

